{"version":3,"sources":["components/containers/NavBar.js","components/containers/LookUp.js","components/presentations/BasicInfo.js","components/presentations/Location.js","components/containers/Report.js","components/containers/HotSpots.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","React","useState","value","setValue","routes","path","label","component","LocationOn","AddCircleOutline","DeveloperBoard","BottomNavigation","className","showLabels","onChange","event","newValue","map","route","key","BottomNavigationAction","Link","to","icon","LookUp","BasicInfo","props","age","gender","symptom","basicInfo","setBasicInfo","updateBasicInfo","target","id","type","bind","FormControl","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","control","Radio","color","Divider","rows","Button","variant","onClick","updateParentInfo","AnyReactComponent","text","Location","setIsMarkerShown","useEffect","delayedShowMarker","setTimeout","defaultProps","center","lat","lng","zoom","style","height","width","bootstrapURLKeys","defaultCenter","defaultZoom","Report","stepperIndex","setStepperIndex","state","city","lon","area","report","setReport","stepperComponents","data","console","log","updateStepper","updateLocationAndPostReport","Hotspots","window","google","App","from","Boolean","location","hostname","match","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener"],"mappings":"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","file":"static/js/main.3da7483a.chunk.js","sourcesContent":["import React from 'react';\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport {Link} from \"react-router-dom\";\nimport {RssFeed, LocationOn, DeveloperBoard, AddCircleOutline } from \"@material-ui/icons\";\nimport \"../../styles/navbar.css\"\n\nconst NavBar = () => {\n\n    const [value, setValue] = React.useState(0);\n\n    const routes = [ {\n        path: \"/hotspots\",\n        label: \"HotSpots\",\n        component: <LocationOn />\n    }, {\n        path: \"/report\",\n        label: \"Report Case\",\n        component: <AddCircleOutline />\n    }, {\n        path: \"/loopkup\",\n        label: \"LookUp Case\",\n        component: <DeveloperBoard />\n    }];\n\n    return (\n            <BottomNavigation value={value} className={\"_navbar\"} showLabels onChange={(event, newValue) => {\n                setValue(newValue);\n        }}>\n                {routes.map((route, key) => <BottomNavigationAction key={key} label={route.label} component={Link} to={route.path} className={\"_navitem\"} icon={route.component} />)}\n            </BottomNavigation>\n    )\n};\n\nexport default NavBar;\n","import React from 'react';\n\nconst LookUp = () => {\n    return (\n        <div>\n            Feeds is\n        </div>\n    )\n};\n\n\nexport default LookUp;\n","import React, {useState} from 'react';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Button from \"@material-ui/core/Button\";\nimport Divider from \"@material-ui/core/Divider\";\n\n\nconst BasicInfo = (props) => {\n\n    const [basicInfo, setBasicInfo] = useState({\n        age: \"\",\n        gender: \"\",\n        symptom: \"\"\n    });\n\n    const updateBasicInfo = (event) => {\n        if(event.target.id === \"age\") {\n            setBasicInfo({\n                ...basicInfo,\n                age: event.target.value\n            })\n        }  else  {\n            setBasicInfo({\n                ...basicInfo,\n                symptom: event.target.value\n            })\n        }\n    };\n\n    const updateGender = (event) => {\n        setBasicInfo({\n            ...basicInfo,\n            gender: event.target.value\n        })\n    };\n\n    const updateParentInfo = () => {\n        props.updateParentInfo(basicInfo);\n    };\n\n    return (\n        <div>\n            <h3 className={\"_title\"}>\n                <div>Basic Info</div>\n                <div className={\"underline\"}></div>\n\n            </h3>\n            <div>\n                <div className={\"form-space\"}>\n                    <label className={\"_label\"}>Age</label>\n                    <input id=\"age\"\n                           className={\"form-control\"}\n                           type=\"number\"\n                           onChange={updateBasicInfo.bind(this)}/>\n\n                </div>\n                <div className={\"form-space\"}>\n                    <FormControl component=\"fieldset\">\n                        <div className={\"_label\"}>Gender</div>\n                        <RadioGroup row aria-label=\"position\" name=\"position\" id={\"gender\"} defaultValue=\"top\" onChange={updateGender.bind(this)}>\n                            <FormControlLabel value=\"M\" control={<Radio color=\"primary\" />} label={<span className={\"gender\"}>Male</span>}/>\n                            <FormControlLabel value=\"F\" control={<Radio color=\"primary\" />} label={<span className={\"gender\"}>Female</span>}/>\n                            <FormControlLabel value=\"T\" control={<Radio color=\"primary\" />} label={<span className={\"gender\"}>Trangender</span>}/>\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n\n                <Divider />\n\n                <div className=\"form-group form-space\">\n                    <label className={\"_label\"}>Patient Symptoms</label>\n                    <textarea className=\"form-control\" rows=\"5\" id={\"symptoms\"} value={basicInfo.symptom} onChange={updateBasicInfo.bind(this)}/>\n                </div>\n                <div className={\"justify-end\"}>\n                    <Button variant=\"contained\" color=\"primary\" className={\"_button\"} onClick={() => updateParentInfo()}>\n                        Next\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport  default BasicInfo;\n","import React, {useEffect, useState} from 'react';\n\nimport GoogleMapReact from 'google-map-react';\n\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\n\nconst Location = () => {\n\n    const [isMarkerShown, setIsMarkerShown] = useState(false);\n\n    useEffect( () => delayedShowMarker(), []);\n\n    const delayedShowMarker = () => {\n        setTimeout(() => {\n            setIsMarkerShown(true)\n        }, 3000)\n    };\n\n    const handleMarkerClick = () => {\n        setIsMarkerShown(false);\n        delayedShowMarker();\n    };\n\n    const defaultProps = {\n        center: {\n            lat: 59.95,\n            lng: 30.33\n        },\n        zoom: 11\n    };\n\n    return (\n        <div>\n            <div>\n                <h3>Location</h3>\n                <div className={\"underline\"}/>\n            </div>\n\n            <div style={{ height: '100vh', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{ key: \"AIzaSyCCuPYXot_6UOeBPPp4pHVqHVfK_k9SLMY\" }}\n                    defaultCenter={defaultProps.center}\n                    defaultZoom={defaultProps.zoom}\n\n                >\n                    <AnyReactComponent\n                        lat={59.955413}\n                        lng={30.337844}\n                        text=\"My Marker\"\n                    />\n                </GoogleMapReact>\n            </div>\n        </div>\n    )\n};\n\nexport  default Location;\n\n\n","import React, {useState} from 'react';\nimport BasicInfo from \"../presentations/BasicInfo\";\nimport Location from \"../presentations/Location\";\nimport \"../../styles/stepper.css\"\n\nconst Report = () => {\n\n    const [stepperIndex, setStepperIndex] = useState(0);\n\n    const [report, setReport] = useState( {\n        age : '',\n        gender : '',\n        symptom : '',\n        state : '',\n        city : '',\n        lat : '',\n        lon : '',\n        area : ''\n    });\n\n    const increaseStepper = () => {\n        setStepperIndex(stepperIndex + 1);\n    };\n\n    const decreaseStepper = () => {\n        setStepperIndex(stepperIndex + 1);\n    };\n\n    const updateBasicInfo = (data) => {\n        console.log(\"Basic\");\n        setReport({\n            ...report,\n            age: data.age,\n            gender: data.gender,\n            symptom: data.symptom\n        });\n        increaseStepper();\n    };\n\n    const updateLocationAndPostReport = (data) => {\n        console.log(\"Location\");\n        setReport({\n            ...report,\n            state : data.state,\n            city : data.city,\n            lat : data.lat,\n            lon : data.lon\n        });\n        console.log(report);\n    };\n\n    const stepperComponents = [\n        {\n            component: <BasicInfo updateParentInfo={updateBasicInfo.bind(this)}/>\n        }, {\n            component: <Location updateStepper={() => decreaseStepper()} updateLocationAndPostReport={updateLocationAndPostReport.bind(this)}/>\n        }\n    ];\n\n    return (\n        <div className={\"_stepper-wrapper\"}>\n            {stepperComponents[stepperIndex].component}\n        </div>\n    )\n};\n\n\nexport default Report;\n","import React from 'react';\n\nconst Hotspots = () => {\n    return (\n        <div>\n            Hotspots\n        </div>\n    )\n};\n\n\nexport default Hotspots;\n","/* global google */\nimport React from 'react';\nimport {BrowserRouter as Router, Redirect, Route} from 'react-router-dom';\nimport './App.css';\nimport NavBar from \"./components/containers/NavBar\";\nimport LookUp from \"./components/containers/LookUp\";\nimport Report from \"./components/containers/Report\";\nimport Hotspots from \"./components/containers/HotSpots\";\n\nconst google = window.google;\n\nfunction App() {\n  return (\n        <Router>\n            <div className=\"app\">\n                <Route path=\"/hotspots\" component={LookUp} />\n                <Route path=\"/report\" component={Report} />\n                <Route path=\"/loopkup\" component={Hotspots} />\n                <Redirect from={\"/\"} to={\"/report\"}/>\n                <NavBar/>\n            </div>\n        </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n    document.addEventListener('deviceready', () => {\n        renderReactDom();\n    }, false);\n} else {\n    renderReactDom();\n}\n"],"sourceRoot":""}